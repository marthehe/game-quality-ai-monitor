import json
from datetime import datetime, timedelta

# ðŸ‘‡ Path to the telemetry log file
# This is where crash and event data is being stored (generated by telemetry_generator.py)
LOG_FILE = "C:/Users/t-mahend/game-quality-ai-monitor/telemetry_simulator/telemetry_log.json"

# ðŸ‘‡ Time window (in minutes) to analyze recent crash activity
TIME_WINDOW_MINUTES = 5

# ðŸ‘‡ Alert threshold â€” if more than this number of crashes are detected, trigger an alert
CRASH_THRESHOLD = 3

# ðŸ§  Read telemetry logs from file
def read_telemetry_logs():
    """
    Open and read the telemetry log file line by line.
    Each line is expected to be a JSON object (one event).
    Convert each line to a Python dictionary using json.loads().
    """
    try:
        with open(LOG_FILE, "r") as f:
            lines = f.readlines()  # Read all lines from the file
            return [json.loads(line) for line in lines]  # Parse each JSON line into a dictionary
    except FileNotFoundError:
        print("[ERROR] Log file not found.")  # If file is missing, show an error
        return []  # Return an empty list to avoid crashing the program

# ðŸ§  Filter crash logs that occurred within the last X minutes
def filter_recent_crashes(logs):
    """
    Check each log entry to see if:
    - It's a crash (event_type == "crash")
    - It occurred within the last TIME_WINDOW_MINUTES
    """
    now = datetime.utcnow()  # Current UTC time
    window_start = now - timedelta(minutes=TIME_WINDOW_MINUTES)  # Start of the time window

    recent_crashes = [
        log for log in logs
        if log["event_type"] == "crash"  # Only keep crash events
        and datetime.fromisoformat(log["timestamp"]) >= window_start  # Only if it's within the window
    ]

    return recent_crashes  # Return the filtered crash list

# ðŸ§  Main execution block
def main():
    print("[INFO] Reading logs...")  # Inform user that we're starting
    logs = read_telemetry_logs()  # Step 1: Load all logs from the file
    recent_crashes = filter_recent_crashes(logs)  # Step 2: Filter only recent crash events

    # Step 3: Check if the number of recent crashes is too high
    if len(recent_crashes) > CRASH_THRESHOLD:
        print(f"[ALERT] ðŸš¨ High crash rate detected: {len(recent_crashes)} crashes in the last {TIME_WINDOW_MINUTES} minutes!")

        # Step 4: Print detailed crash info to help debugging
        for crash in recent_crashes:
            print(f" - {crash['timestamp']} on {crash['platform']} with code: {crash['code']}")
    else:
        # If crash count is normal, let the user know
        print(f"[INFO] Crash count normal: {len(recent_crashes)} crashes in the last {TIME_WINDOW_MINUTES} minutes.")

# ðŸ§  Python convention to ensure main() runs only if script is executed directly (not imported)
if __name__ == "__main__":
    main()
